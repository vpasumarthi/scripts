#!/bin/sh

#SBATCH --job-name=SPE-Fe2O3-Exp
#SBATCH --output=job.out
#SBATCH --error=job.err
#SBATCH --clusters=ub-hpc
#SBATCH --partition=general-compute
#SBATCH --qos=general-compute
#SBATCH --time=72:00:00
#SBATCH --nodes=1
#SBATCH --tasks-per-node=16
#SBATCH --exclusive
#SBATCH --mail-user=pasumart@buffalo.edu
#SBATCH --mail-type=END
#SBATCH --constraint=IB

# Job description:
# run vasp job followed by bader analysis; also prints the job run time to the output file

# CopyFreq in seconds
CopyFreq=3600
bader_std=0
bader_mag=1
# 0: Check for successful completion of the job before performing Bader analysis
# 1: Check for convergence before performing Bader analysis
bader_on_convergence=1
WAVECARLOC='WAVECAR'

echo "SLURMTMPDIR is $SLURMTMPDIR"
export OMP_NUM_THREADS=1
export I_MPI_PIN=0
ulimit -s unlimited
export NNODES=`srun -l hostname | uniq | wc -l`
export NPROCS=`srun -l hostname | wc -l`

HOSTFILE=hosts.$SLURM_JOB_ID
srun hostname -s | sort > $HOSTFILE

cd $SLURM_SUBMIT_DIR
sbcast $SLURM_SUBMIT_DIR/KPOINTS $SLURMTMPDIR/KPOINTS
sbcast $SLURM_SUBMIT_DIR/POTCAR $SLURMTMPDIR/POTCAR
sbcast $SLURM_SUBMIT_DIR/POSCAR $SLURMTMPDIR/POSCAR
sbcast $SLURM_SUBMIT_DIR/INCAR $SLURMTMPDIR/INCAR

if [ -f $WAVECARLOC ]; then
	echo "WAVECAR found."
	if [ -s $WAVECARLOC ]; then
		sbcast $SLURM_SUBMIT_DIR/$WAVECARLOC $SLURMTMPDIR/WAVECAR
	else
		echo "WAVECAR is empty."
	fi		
else
	echo "WAVECAR not found."
fi

cd $SLURMTMPDIR

if [ "Gamma" == `awk 'NR==3{print $1}' KPOINTS` ] && [ `awk 'NR==4{print $1}' KPOINTS` -eq 1 ] && [ `awk 'NR==4{print $2}' KPOINTS` -eq 1 ] && [ `awk 'NR==4{print $3}' KPOINTS` -eq 1 ]; then
	module use /projects/academic/mdupuis2/software/modules/vasp_gam
	module load vasp_gam
else
	module use /projects/academic/mdupuis2/software/modules/vasp5.4.4
	module load vasp5.4.4
fi
module list
which vasp

echo "The number of nodes is $SLURM_NNODES"
echo "The number of processors per node $SLURM_NTASKS_PER_NODE"
echo "The number of processors is $NPROCS"

TimeLimit=`sacct -j ${SLURM_JOB_ID} -o TimeLimit -n`
TimeLimitStrLen=`echo -n $TimeLimit | wc -m`
PlusChar="+"
if [ $TimeLimitStrLen -gt 8 ]; then
    LastChar=${TimeLimit:9:1}
    if [ "$LastChar" == "$PlusChar" ]; then
        DayStringLen=2
        TimeLimitHrStrStartIndex=3
    else
        DayStringLen=1
        TimeLimitHrStrStartIndex=2
    fi
    TimeLimitDays=${TimeLimit:0:$DayStringLen}
else
    TimeLimitDays=0
    TimeLimitHrStrStartIndex=2
fi
TimeLimitHr=$(($TimeLimitDays * 24 + ${TimeLimit:$TimeLimitHrStrStartIndex:2}))
TimeLimitSec=$(($TimeLimitHr * 3600))
NumCopy=$(($TimeLimitSec / $CopyFreq))
printf "TimeLimitHr: %d\n" $TimeLimitHr

export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi.so

SECONDS=0

srun --propagate=STACK vasp &
PID=$!
printf "PID: %d\n" $PID
CID=$$
printf "CID: %d\n" $CID

BREAKFLAG=0
for (( iCopy=1; iCopy<$NumCopy; iCopy++ ))
do
    sleep $CopyFreq
    cp $SLURMTMPDIR/* $SLURM_SUBMIT_DIR
    kill -0 $PID
    if [ $? -ne 0 ]; then
        printf "PID is terminated.\n"
		if [ `grep "switches" OUTCAR -c` -ne 0 ]; then
			do_bader=1
			if [ $bader_on_convergence -ne 0 ]; then
				if [ `grep "accuracy" OUTCAR -c` -eq 0 ]; then
					do_bader=0
				fi
			fi

			if [ $bader_std -ne 0 ] || [ $bader_mag -ne 0 ] && [ $do_bader -ne 0 ]; then
			    printf "Generating CHGCAR_sum:\n"
			    /projects/academic/mdupuis2/vish/lib/vtstscripts-930/chgsum.pl AECCAR0 AECCAR2
			    printf "Finished generating CHGCAR_sum.\n"
			fi

			if [ $bader_std -ne 0 ] && [ $do_bader -ne 0 ]; then
			    printf "Initiating Bader analysis on CHGCAR:\n"
			    /projects/academic/mdupuis2/vish/bin/bader CHGCAR -ref CHGCAR_sum
			    printf "Finished Bader analysis on CHGCAR.\n"
			fi

			if [ $bader_mag -ne 0 ] && [ $do_bader -ne 0 ]; then
			    printf "Generating CHGCAR_mag:\n"
			    /projects/academic/mdupuis2/vish/lib/vtstscripts-930/chgsplit.pl CHGCAR
			    printf "Finished generating CHGCAR_mag.\n"

			    printf "Initiating Bader analysis on CHGCAR_mag:\n"
			    /projects/academic/mdupuis2/vish/bin/bader CHGCAR_mag -ref CHGCAR_sum
			    printf "Finished Bader analysis on CHGCAR_mag.\n"
			fi
            printf "Initiating process to copy files from remote to local:\n"
            cp $SLURMTMPDIR/* $SLURM_SUBMIT_DIR
            printf "Finished process to copy files from remote to local.\n"
		fi
        BREAKFLAG=1
        break
    fi
done

if [ $BREAKFLAG ]; then
	kill -0 $PID
	if [ $? -ne 1 ]; then
		printf "Exceeded wall-time requested. Terminating PID.\n" 1>&2
		kill $PID
	fi
fi

duration=$SECONDS
days=$((duration/60/60/24))
hours=$((duration/60/60%24))
minutes=$((duration/60%60))
seconds=$((duration%60))
printf 'Time elapsed: '
(( $days > 0 )) && printf '%d days ' $days
(( $hours > 0 )) && printf '%d hours ' $hours
(( $minutes > 0 )) && printf '%d minutes ' $minutes
(( $days > 0 || $hours > 0 || $minutes > 0 )) && printf 'and '
printf '%d seconds\n' $seconds
