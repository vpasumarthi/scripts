#!/bin/sh

#SBATCH --job-name=SPE-Fe2O3-Exp
#SBATCH --output=job.out
#SBATCH --error=job.err
#SBATCH --clusters=ub-hpc
#SBATCH --partition=general-compute
#SBATCH --qos=general-compute
#SBATCH --time=72:00:00
#SBATCH --nodes=1
#SBATCH --tasks-per-node=16
#SBATCH --exclusive
#SBATCH --mail-user=pasumart@buffalo.edu
#SBATCH --mail-type=END
#SBATCH --constraint=IB

COPYFREQ=3600
generate_chgsum=1
generate_chgmag=1
bader=0
bader_mag=1

# Job description:
# run vasp job followed by bader analysis; also prints the job run time to the output file

echo "SLURMTMPDIR is $SLURMTMPDIR"
export OMP_NUM_THREADS=1
export I_MPI_PIN=0
ulimit -s unlimited
export NNODES=`srun -l hostname | uniq | wc -l`
export NPROCS=`srun -l hostname | wc -l`

HOSTFILE=hosts.$SLURM_JOB_ID
srun hostname -s | sort > $HOSTFILE

cd $SLURM_SUBMIT_DIR
sbcast $SLURM_SUBMIT_DIR/KPOINTS $SLURMTMPDIR/KPOINTS
sbcast $SLURM_SUBMIT_DIR/POTCAR $SLURMTMPDIR/POTCAR
sbcast $SLURM_SUBMIT_DIR/POSCAR $SLURMTMPDIR/POSCAR
sbcast $SLURM_SUBMIT_DIR/INCAR $SLURMTMPDIR/INCAR
cd $SLURMTMPDIR

module use /projects/academic/mdupuis2/software/modules/vasp5.4.4
module load vasp5.4.4
module list
which vasp

echo "The number of nodes is $SLURM_NNODES"
echo "The number of processors per node $SLURM_NTASKS_PER_NODE"
echo "The number of processors is $NPROCS"

TimeLimit=`sacct -j ${SLURM_JOB_ID} -o TimeLimit -n`
TimeLimit=`printf "%s" "${TimeLimit:0:10}"`
TimeLimitSubString=${TimeLimit:0:4}
TimeLimitDays=${TimeLimit:0:1}
if [ $TimeLimitDays ]; then
    TimeLimitHr=$(($TimeLimitDays * 24 + ${TimeLimit:2:2}))
else
    TimeLimitHr=${TimeLimit:2:2}
fi

printf "TimeLimitHr: %d\n" $TimeLimitHr

export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi.so

SECONDS=0

srun --propagate=STACK vasp &
PID=$!
printf "PID: %d\n" $PID
CID=$$
printf "CID: %d\n" $CID

BREAKFLAG=0
for (( iHr=1; iHr<$TimeLimitHr; iHr++ ))
do
    sleep $COPYFREQ
    cp $SLURMTMPDIR/* $SLURM_SUBMIT_DIR
    kill -0 $PID
    if [ $? -ne 0 ]; then
        printf "PID is terminated.\n"
		if [ 0 -ne `grep "switches" OUTCAR -c` ]; then
			if [ $generate_chgsum -ne 0 ]; then
			    printf "Generating CHGCAR_sum:\n"
			    /projects/academic/mdupuis2/vish/lib/vtstscripts-930/chgsum.pl AECCAR0 AECCAR2
			    printf "Finished generating CHGCAR_sum.\n"
			fi
			if [ $generate_chgmag -ne 0 ]; then
			    printf "Generating CHGCAR_mag:\n"
			    /projects/academic/mdupuis2/vish/lib/vtstscripts-930/chgsplit.pl CHGCAR
			    printf "Finished generating CHGCAR_mag.\n"
			fi
			if [ $bader -ne 0 ]; then
			    printf "Initiating Bader analysis on CHGCAR:\n"
			    /projects/academic/mdupuis2/vish/bin/bader CHGCAR -ref CHGCAR_sum
			    printf "Finished Bader analysis on CHGCAR.\n"
			fi
			if [ $bader_mag -ne 0 ]; then
			    printf "Initiating Bader analysis on CHGCAR_mag:\n"
			    /projects/academic/mdupuis2/vish/bin/bader CHGCAR_mag -ref CHGCAR_sum
			    printf "Finished Bader analysis on CHGCAR_mag.\n"
			fi
            printf "Initiating process to copy files from remote to local:\n"
            cp $SLURMTMPDIR/* $SLURM_SUBMIT_DIR
            printf "Finished process to copy files from remote to local.\n"
		fi
        BREAKFLAG=1
        break
    fi
done

if [ $BREAKFLAG ]; then
	kill -0 $PID
	if [ $? -ne 1 ]; then
		kill $PID
	fi
fi

duration=$SECONDS
days=$((duration/60/60/24))
hours=$((duration/60/60%24))
minutes=$((duration/60%60))
seconds=$((duration%60))
printf 'Time elapsed: '
(( $days > 0 )) && printf '%d days ' $days
(( $hours > 0 )) && printf '%d hours ' $hours
(( $minutes > 0 )) && printf '%d minutes ' $minutes
(( $days > 0 || $hours > 0 || $minutes > 0 )) && printf 'and '
printf '%d seconds\n' $seconds
