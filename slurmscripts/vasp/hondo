#!/bin/sh

#SBATCH --job-name=SPE-Fe2O3-Exp
#SBATCH --output=job.out
#SBATCH --error=job.err
#SBATCH --clusters=ub-hpc
#SBATCH --partition=general-compute
#SBATCH --qos=general-compute
#SBATCH --time=72:00:00
#SBATCH --nodes=1
#SBATCH --tasks-per-node=16
#SBATCH --exclusive
#SBATCH --mail-user=pasumart@buffalo.edu
#SBATCH --mail-type=END
#SBATCH --constraint=IB

# Job description:
# run hondo job; also prints the job run time to the standard output

# CopyFreq in seconds
CopyFreq=3600

echo "SLURMTMPDIR is $SLURMTMPDIR"
export OMP_NUM_THREADS=1
export I_MPI_PIN=0
ulimit -s unlimited
export NNODES=`srun -l hostname | uniq | wc -l`
export NPROCS=`srun -l hostname | wc -l`

HOSTFILE=hosts.$SLURM_JOB_ID
srun hostname -s | sort > $HOSTFILE

cd $SLURM_SUBMIT_DIR
sbcast $SLURM_SUBMIT_DIR/bi2-nn.hnd $SLURMTMPDIR/bi2-nn.hnd
cd $SLURMTMPDIR

module load intel/15.0
module use /projects/academic/mdupuis2/software/modules/
module load hondo
module list

echo "The number of nodes is $SLURM_NNODES"
echo "The number of processors per node $SLURM_NTASKS_PER_NODE"
echo "The number of processors is $NPROCS"

TimeLimit=`sacct -j ${SLURM_JOB_ID} -o TimeLimit -n`
TimeLimitStrLen=`echo -n $TimeLimit | wc -m`
PlusChar="+"
if [ $TimeLimitStrLen -gt 8 ]; then
    LastChar=${TimeLimit:9:1}
    if [ "$LastChar" == "$PlusChar" ]; then
        DayStringLen=2
        TimeLimitHrStrStartIndex=3
    else
        DayStringLen=1
        TimeLimitHrStrStartIndex=2
    fi
    TimeLimitDays=${TimeLimit:0:$DayStringLen}
else
    TimeLimitDays=0
fi
TimeLimitHr=$(($TimeLimitDays * 24 + ${TimeLimit:$TimeLimitHrStrStartIndex:2}))
TimeLimitSec=$(($TimeLimitHr * 3600))
NumCopy=$(($TimeLimitSec / $CopyFreq))
printf "TimeLimitHr: %d\n" $TimeLimitHr

export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi.so

SECONDS=0

srun hondo.linux.intel bvo_cluster01-v1-v2.hnd bvo_cluster01-v1-v2.out &

PID=$!
printf "PID: %d\n" $PID
CID=$$
printf "CID: %d\n" $CID

BREAKFLAG=0
for (( iCopy=1; iCopy<$NumCopy; iCopy++ ))
do
    sleep $CopyFreq
    cp $SLURMTMPDIR/* $SLURM_SUBMIT_DIR
    kill -0 $PID
    if [ $? -ne 0 ]; then
        printf "PID is terminated.\n"
        BREAKFLAG=1
        break
    fi
done

cp $SLURMTMPDIR/* $SLURM_SUBMIT_DIR

if [ $BREAKFLAG ]; then
    kill -0 $PID
    if [ $? -ne 1 ]; then
        printf "Exceeded wall-time requested. Terminating PID.\n" 1>&2
        kill $PID
    fi
fi

duration=$SECONDS
days=$((duration/60/60/24))
hours=$((duration/60/60%24))
minutes=$((duration/60%60))
seconds=$((duration%60))
printf 'Time elapsed: '
(( $days > 0 )) && printf '%d days ' $days
(( $hours > 0 )) && printf '%d hours ' $hours
(( $minutes > 0 )) && printf '%d minutes ' $minutes
(( $days > 0 || $hours > 0 || $minutes > 0 )) && printf 'and '
printf '%d seconds\n' $seconds
